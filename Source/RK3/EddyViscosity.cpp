// Generated by Pankaj Jha on 05/31/2021
#include <RK3.H>

using namespace amrex;

// Compute Eddy Viscosity
Real
ComputeTurbulentViscosity(
  const int& i,
  const int& j,
  const int& k,
  const Array4<Real>& u,
  const Array4<Real>& v,
  const Array4<Real>& w,
  const NextOrPrev& nextOrPrev,
  const MomentumEqn& momentumEqn,
  const DiffusionDir& diffDir,
  const Geometry& geom,
  Array4<Real>& nut)
{
  return 0;
}

void ComputeTurbulentViscosity(const Array4<Real>& u, const Array4<Real>& v, const Array4<Real>& w,
                               const Geometry &geom,
                               Array4<Real>& nut) {

}

/// Compute K (i-1/2, j+1/2, k) etc given K(i, j, k) or nut (i, j, k) is known
Real
InterpolateTurbulentViscosity(const int &i, const int &j, const int &k,
                              const Array4<Real>& u, const Array4<Real>& v, const Array4<Real>& w,
                              const enum NextOrPrev &nextOrPrev,
                              const enum MomentumEqn &momentumEqn,
                              const enum DiffusionDir &diffDir,
                              const Geometry &geom,
                              const Array4<Real>& nut) {
  // Assuming we already have 'nut' computed for all (i, j, k)
// TODO: Check exactly where we should compute 'nut'
  Real turbViscInterpolated = 1.0;

  switch (momentumEqn) {
  case MomentumEqn::x: // Reference face is x-face index (i, j, k)
    switch (diffDir) {
    case DiffusionDir::x:
      if (nextOrPrev == NextOrPrev::next)    // K (i  , j, k) needed to obtain tau11 (i+1/2)
        turbViscInterpolated = nut(i, j, k);
      else // nextOrPrev == NextOrPrev::prev // K (i-1, j, k) needed to obtain tau11 (i-1/2)
        turbViscInterpolated = nut(i-1, j, k);
      break;
    case DiffusionDir::y:
      if (nextOrPrev == NextOrPrev::next)    // K (i-1/2, j+1/2, k) needed to obtain tau12 (j+1/2)
        turbViscInterpolated = 0.25*( nut(i-1, j, k) + nut(i, j, k) + nut(i-1, j+1, k) + nut(i, j+1, k) );
      else // nextOrPrev == NextOrPrev::prev // K (i-1/2, j-1/2, k) needed to obtain tau12 (j-1/2)
        turbViscInterpolated = 0.25*( nut(i-1, j, k) + nut(i, j, k) + nut(i-1, j-1, k) + nut(i, j-1, k) );
      break;
    case DiffusionDir::z:
      if (nextOrPrev == NextOrPrev::next)    // K (i-1/2, j, k+1/2) needed to obtain tau13 (k+1/2)
        turbViscInterpolated = 0.25*( nut(i-1, j, k) + nut(i, j, k) + nut(i-1, j, k+1) + nut(i, j, k+1) );
      else // nextOrPrev == NextOrPrev::prev // K (i-1/2, j, k-1/2) needed to obtain tau13 (k-1/2)
        turbViscInterpolated = 0.25*( nut(i-1, j, k) + nut(i, j, k) + nut(i-1, j, k-1) + nut(i, j, k-1) );
      break;
    default:
      amrex::Abort("Error: Diffusion direction is unrecognized");
    }
    break;
  case MomentumEqn::y: // Reference face is y-face index (i, j, k)
    switch (diffDir) {
    case DiffusionDir::x:
      if (nextOrPrev == NextOrPrev::next)    // K (i+1/2, j-1/2, k) needed to obtain tau21 (i+1/2)
        turbViscInterpolated = 0.25*( nut(i, j-1, k) + nut(i, j, k) + nut(i+1, j-1, k) + nut(i+1, j, k) );
      else // nextOrPrev == NextOrPrev::prev // K (i-1/2, j-1/2, k) needed to obtain tau21 (i-1/2)
        turbViscInterpolated = 0.25*( nut(i, j-1, k) + nut(i, j, k) + nut(i-1, j-1, k) + nut(i-1, j, k) );
      break;
    case DiffusionDir::y:
      if (nextOrPrev == NextOrPrev::next)    // K (i, j  , k) needed to obtain tau22 (j+1/2)
        turbViscInterpolated = nut(i, j, k);
      else // nextOrPrev == NextOrPrev::prev // K (i, j-1, k) needed to obtain tau22 (j-1/2)
        turbViscInterpolated = nut(i, j-1, k);
      break;
    case DiffusionDir::z:
      if (nextOrPrev == NextOrPrev::next)    // K (i, j-1/2, k+1/2) needed to obtain tau23 (k+1/2)
        turbViscInterpolated = 0.25*( nut(i, j-1, k) + nut(i, j, k) + nut(i, j-1, k+1) + nut(i, j, k+1) );
      else // nextOrPrev == NextOrPrev::prev // K (i, j-1/2, k-1/2) needed to obtain tau23 (k-1/2)
        turbViscInterpolated = 0.25*( nut(i, j-1, k) + nut(i, j, k) + nut(i, j-1, k-1) + nut(i, j, k-1) );
      break;
    default:
      amrex::Abort("Error: Diffusion direction is unrecognized");
    }
    break;
  case MomentumEqn::z: // Reference face is z-face index (i, j, k)
    switch (diffDir) {
    case DiffusionDir::x:
      if (nextOrPrev == NextOrPrev::next)    // K (i+1/2, j, k-1/2) needed to obtain tau31 (i+1/2)
        turbViscInterpolated = 0.25*( nut(i, j, k-1) + nut(i, j, k) + nut(i+1, j, k-1) + nut(i+1, j, k) );
      else // nextOrPrev == NextOrPrev::prev // K (i-1/2, j, k-1/2) needed to obtain tau31 (i-1/2)
        turbViscInterpolated = 0.25*( nut(i, j, k-1) + nut(i, j, k) + nut(i-1, j, k-1) + nut(i-1, j, k) );
      break;
    case DiffusionDir::y:
      if (nextOrPrev == NextOrPrev::next)    // K (i, j+1/2, k-1/2) needed to obtain tau32 (j+1/2)
        turbViscInterpolated = 0.25*( nut(i, j, k-1) + nut(i, j, k) + nut(i, j+1, k-1) + nut(i, j+1, k) );
      else // nextOrPrev == NextOrPrev::prev // K (i, j-1/2, k-1/2) needed to obtain tau32 (j-1/2)
        turbViscInterpolated = 0.25*( nut(i, j, k-1) + nut(i, j, k) + nut(i, j-1, k-1) + nut(i, j-1, k) );
      break;
    case DiffusionDir::z:
      if (nextOrPrev == NextOrPrev::next)    // K (i, j, k  ) needed to obtain tau33 (k+1/2)
        turbViscInterpolated = nut(i, j, k);
      else // nextOrPrev == NextOrPrev::prev // K (i, j, k-1) needed to obtain tau33 (k-1/2)
        turbViscInterpolated = nut(i, j, k-1);
      break;
    default:
      amrex::Abort("Error: Diffusion direction is unrecognized");
    }
    break;
  default:
    amrex::Abort("Error: Momentum equation is unrecognized");
  }

  return turbViscInterpolated;
}