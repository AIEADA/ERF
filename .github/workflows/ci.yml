name: ERF-CI

on:
  push:
    branches: [development]
  pull_request:
    branches: [development]

jobs:
  CMake:
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest]
        include:
          - os: ubuntu-latest
            install_deps: sudo apt-get install mpich libmpich-dev
            comp: gnu
            procs: $(nproc)
            #mpipreflags:
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.6.0
        with:
          access_token: ${{github.token}}
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Setup
        run: |
          echo "::add-matcher::.github/problem-matchers/gcc.json"
          echo "NPROCS=${{matrix.procs}}" >> $GITHUB_ENV
          cmake -E make_directory ${{runner.workspace}}/deps
      - name: Dependencies
        run: |
          # Install MPI
          ${{matrix.install_deps}}
          ## Install MetaPhysicL
          #cd ${{runner.workspace}}/deps
          #git clone --recursive https://github.com/roystgnr/MetaPhysicL.git ${{runner.workspace}}/deps/MetaPhysicL
          #cd ${{runner.workspace}}/deps/MetaPhysicL
          #./bootstrap
          #./configure --prefix="${{runner.workspace}}/deps/install/MetaPhysicL"
          #make -j ${{env.NPROCS}}
          #make install
          ## Install MASA
          #cd ${{runner.workspace}}/deps
          #git clone --recursive https://github.com/manufactured-solutions/MASA.git ${{runner.workspace}}/deps/MASA
          #cd ${{runner.workspace}}/deps/MASA
          #./bootstrap
          #./configure CXX='mpicxx -std=c++11' CC=mpicc \
          #  METAPHYSICL_DIR="${{runner.workspace}}/deps/install/MetaPhysicL" \
          #  --prefix="${{runner.workspace}}/deps/install/MASA"
          #make -j ${{env.NPROCS}}
          #make install
          ## Install Python packages
          #python -m pip install --upgrade pip
          #pip install nose numpy pandas
      - name: Configure
        run: |
          #for DIM in 1 2 3; do \
          #  if [ "${DIM}" != '3' ]; then WARNINGS=OFF; else WARNINGS=ON; fi; \
          #  printf "\n-------- Configuring ${DIM}D --------\n"; \
          #  cmake \
          #  -B${{runner.workspace}}/build-${DIM}d-${{matrix.os}} \
          #  -DERF_DIM:STRING=${DIM} \
          cmake \
          -B${{runner.workspace}}/build-${{matrix.os}} \
          -DCMAKE_INSTALL_PREFIX:PATH=${{runner.workspace}}/install \
          -DCMAKE_BUILD_TYPE:STRING=RelWithDebInfo \
          -DERF_DIM:STRING=3 \
          -DERF_ENABLE_MPI:BOOL=ON \
          ${{matrix.mpipreflags}} \
          -DERF_ENABLE_TESTS:BOOL=OFF \
          -DERF_ENABLE_FCOMPARE_FOR_TESTS:BOOL=OFF \
          -DERF_ENABLE_MASA:BOOL=OFF \
          -DERF_ENABLE_ALL_WARNINGS:BOOL=ON \
          ${{github.workspace}}; \
          #done
      - name: Build
        run: |
          #for DIM in 1 2 3; do \
          #  printf "\n-------- Building ${DIM}D --------\n"; \
          #  cmake --build ${{runner.workspace}}/build-${DIM}d-${{matrix.os}} \
          #    --parallel ${{env.NPROCS}} 2>&1 | tee -a ${{runner.workspace}}/build-output.txt; \
          #done
          cmake --build ${{runner.workspace}}/build-${{matrix.os}} \
            --parallel ${{env.NPROCS}}; \
      #- name: Report
      #  run: |
      #    echo "::add-matcher::.github/problem-matchers/gcc.json"
      #    cat ${{runner.workspace}}/build-output.txt | egrep "warning:|error:" | sort | uniq | sort -nr | \
      #      awk 'BEGIN{i=0}{print $0}{i++}END{print "Warnings: "i}'
